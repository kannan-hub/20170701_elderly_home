@startuml

namespace Creature{
  abstract class BaseCreatureCompornent{
    + void Initialize()
  }

  class CreatureParameter<<struct>>{
    + int health
    + int movespeed
  }

  class CreatureCore{
    + IObserve<bool> IsAlive
    + IObserve<Damage> OnDamaged
    - CreatureParameter DefailtCreaturePram
    + IObserve<CreatureParameter> CurrentCreaturePram
  }

  CreatureCore --|> Damages.IDamageApplicable
  CreatureCore --|> Damages.IDieable
  BaseCreatureCompornent --> CreatureCore
}

namespace Attacks{
    interface IAttacker

    namespace AttckerImpls{

        class PlayerAttacker <<struct>>

        class NonPlayerAttacker <<struct>>

        PlayerAttacker --r|> Attacks.IAttacker
        NonPlayerAttacker --r|> Attacks.IAttacker
    }

    abstract class BaseBullet{
      + IAttacker attcker
      # float damagePower
    }
    BaseBullet -> IAttacker
    BaseBullet ..> Damages.Damage
    BaseBullet ..> Damages.IDamageApplicable
    BaseBullet ..> Damages.IDieable
    namespace BulletImpls{
        class NomalBullet

        NomalBullet --|> Attacks.BaseBullet
    }
}

namespace Damages{
    interface IDamageApplicable{
    + void ApplyDamage(Damage damage)
    }

    IDamageApplicable --l> Damage

    class Damage<<struct>>{
      + IAttacker attacker
      + float value
    }

    Damage -> Attacks.IAttacker

    interface IDieable{
        + void Kill()
    }

}

@enduml
