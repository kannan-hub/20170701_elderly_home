@startuml

namespace Creature{
  abstract class BaseCreatureCompornent{
    + void Initialize()
  }

  class CreatureParameter<<struct>>{
    + int health
    + int movespeed
  }

  class CreatureCore{
    + IObserve<bool> IsAlive
    + IObserve<Damage> OnDamaged
    - CreatureParameter DefailtCreaturePram
    + IObserve<CreatureParameter> CurrentCreaturePram
  }

  CreatureCore --|> Damages.IDamageApplicable
  CreatureCore --|> Damages.IDieable
  BaseCreatureCompornent --> CreatureCore
}

namespace Player{
  class PlayerParameter<<struct>>{
    + int battery
  }
  PlayerParameter --|> Creature.CreatureParameter

  class PlayerCore{
    + IObserve<bool> IsLightOn
    + IObserve<Weapon> EquipWeapon
    + IObserve<PlayerLoadage> CurrentPlayerLoadge
  }
  PlayerCore --|> Creature.CreatureCore
  PlayerCore ..> Item.ItemBase

  class PlayerLoadage{
    + Weapon weapon
    + List<Item> hasItemList
    + int canMaxHasSpace
    + int currentUseSpace
  }

  namespace InputImpls{
    class AllInputEventProvider
    class DebugKeyInputEventProvider

    AllInputEventProvider --|> Player.IInputEventProvider
    DebugKeyInputEventProvider --|> Player.IInputEventProvider
  }

  interface IInputEventProvider{
    + IObserve<bool> JumpButton
    + IObserve<bool> AttackButton
    + IObserve<bool> AttractButton
    + IObserve<Vecter3> MoveDirection
  }
  BasePlayerCompornent --> IInputEventProvider

  abstract class BasePlayerCompornent{
    # void Initialize
  }
  BasePlayerCompornent --|> Creature.BaseCreatureCompornent

  class PlayerMover{
    + IObserve IsRunning
  }
  PlayerMover --|> BasePlayerCompornent
  PlayerMover --> PlayerCore
  PlayerMover --> PlayerCharacterController
  class PlayerWepon{
    + PlayerAttacker playerAttacker
    + IObserve IsAttack
  }
  PlayerWepon --|> BasePlayerCompornent
  PlayerWepon --> PlayerCharacterController
  class PlayerCharacterController{
    + IObserve IsMove
  }
}

namespace Enemy{
  abstract class BaseEnemyCompornent{
  }
  BaseEnemyCompornent --|> Creature.BaseCreatureCompornent

  class EnmeyParameter<<struct>>{
  }
  EnmeyParameter --|> Creature.CreatureParameter

  class EnemyCore{
  }
  EnemyCore --|> Creature.CreatureCore
}

namespace Attacks{
    interface IAttacker

    namespace AttckerImpls{

        class PlayerAttacker <<struct>>

        class NonPlayerAttacker <<struct>>

        PlayerAttacker --r|> Attacks.IAttacker
        NonPlayerAttacker --r|> Attacks.IAttacker
    }

    abstract class BaseBullet{
      + IAttacker attcker
      # float damagePower
    }
    BaseBullet -> IAttacker
    BaseBullet ..> Damages.Damage
    BaseBullet ..> Damages.IDamageApplicable
    BaseBullet ..> Damages.IDieable
    namespace BulletImpls{
        class NomalBullet

        NomalBullet --|> Attacks.BaseBullet
    }
}

namespace Damages{
    interface IDamageApplicable{
    + void ApplyDamage(Damage damage)
    }

    IDamageApplicable --l> Damage

    class Damage<<struct>>{
      + IAttacker attacker
      + float value
    }

    Damage -> Attacks.IAttacker

    interface IDieable{
        + void Kill()
    }

}

namespace Item{
  interface IPickUpable

  abstract class ItemBase{
    + ItemType
  }

  enum ItemType

  IPickUpable -|> ItemBase
  ItemBase -> ItemType
}

namespace GameManager{
  namespace Scenario{

  }
}

@enduml
